[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "raman_fitting"
license = {file = "LICENSE"}
authors = [
  {name = "David Wallace", email = "mypydavid@proton.me"},
]
description = "Python framework for the batch processing and deconvolution of raman spectra."
readme = {file = "README.md", content-type = "text/markdown"}
keywords = ["spectroscopy", "Raman", "fitting", "deconvolution", "batch processing", "carbonaceous materials"]
classifiers = [
	"License :: OSI Approved :: MIT License",
	"Natural Language :: English",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: Implementation :: CPython",
	"Programming Language :: Python :: Implementation :: PyPy",
	"Intended Audience :: Science/Research",
	"Topic :: Scientific/Engineering :: Physics",
	"Topic :: Scientific/Engineering :: Chemistry",
]
requires-python = ">=3.12"
dynamic = ["version"]
dependencies = [
	"pandas~=2.1.2",
	"scipy~=1.15.1",
	"lmfit~=1.3.2",
	"matplotlib~=3.8.0",
	"numpy~=1.26.1",
	"tablib~=3.5.0",
	"pydantic>=2.5",
	"pydantic-settings>=2.1",
	"pydantic_numpy>=4.1",
	"loguru>=0.7",
	"typer>=0.13.1",
	"mpire[dill]~=2.10.0",
	"tomli-w>=1.0.0"
]

[dependency-groups]
pytest = [
	"pytest",
	"pytest-cov",
	"pytest-flake8",
	"pytest-loguru",
	"mock",
	"wheel"
	]
dev = [
	"isort",
	"pylint",
	"flake8",
	"autopep8",
	"pydocstyle",
	"black",
	"bump-my-version",
	"raman_fitting[pytest]"
	]

[project.urls]
homepage = "https://pypi.org/project/raman-fitting/"
repository = "https://github.com/MyPyDavid/raman-fitting.git"
# documentation = "https://raman-fitting.readthedocs.io/en/latest/"

[project.scripts]
raman_fitting = "raman_fitting.interfaces.typer_cli:app"


[tool.hatch.version]
path = "src/raman_fitting/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = ["/profiling"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

# testing
[tool.pytest.ini_options]
minversion = "7.0"
pythonpath = "src"
addopts = [
    "--import-mode=importlib",
    "-ra",
	"-q",
	"--cov=src",  # Ensure the correct path is specified here
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
	"--strict-markers"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]

testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/example_fixtures/*",
    ]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"


[tool.bumpversion]
current_version = "0.8.0"
commit = true
commit_args = "--no-verify"
message = "Bump version: {current_version} → {new_version}"
tag = true
allow_dirty = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<dev>post)\\d+\\.dev\\d+)?"
serialize = [
    "{major}.{minor}.{patch}.{dev}{$PR_NUMBER}.dev{distance_to_latest_tag}",
    "{major}.{minor}.{patch}"
]
pre_commit_hooks = ["uv sync --upgrade", "git add uv.lock"]

[[tool.bumpversion.files]]
filename = "bumpversion/__init__.py"

[[tool.bumpversion.files]]
filename= "README.md"
search = "The current version is v{current_version}"
replace = "The current version is v{new_version}"

[[tool.bumpversion.files]]
filename= "pyproject.toml"
search = "current_version = '{current_version}'"
replace = "current_version = '{new_version}'"

[tool.bumpversion.parts.pre_l]
values = ["dev", "rc", "final"]
optional_value = "final"
